jaccard_df[r,c] = 1 # assign as 1
} else if (c > r) { # if not then when columns is more than rows, add the variables of rows and
jaccard_df[r,c] <- jaccard_fun(boot_mat_2[,r], boot_mat_2[,c]) # replace with list from above
}
}
pb$tick() # for progress bar
Sys.sleep(1 / 1000) # for progress bar
}
bound_GSE22544 <- read.csv("bound_GSE22544.csv", header = T, sep = ",", stringsAsFactors = FALSE)
bound_GSE22544 <- bound_GSE22544[,-1] # removes 1st column of numbers
bound_GSE22544 <- bound_GSE22544[!(is.na(bound_GSE22544$Gene.Symbol) | bound_GSE22544$Gene.Symbol==""), ] # removes columns that have NAs or empty values
gene_symbol_GSE22544 <- read.csv("gene_symbol_GSE22544.csv", header = T, sep = ",", stringsAsFactors = FALSE)
gene_symbol_GSE22544 <- gene_symbol_GSE22544[,2] # chooses only the second column
gene_symbol_GSE22544 <- na.omit(gene_symbol_GSE22544) # removes rows that have NAs
dim(bound_GSE22544)
dim(gene_symbol_GSE22544)
nrow(gene_symbol_GSE22544)
length(gene_symbol_GSE22544)
length(gene_symbol_GSE22544)[,2]
length(gene_symbol_GSE22544)[,1]
View(gene_symbol_GSE22544)
# (2) Using unique() function to remove duplicate genes
# --------------------------------------------------------
uniq_genesymbol <- unique(gene_symbol_GSE22544) #16,972 entries before unique function
length(uniq_genesymbol)
bound_GSE22544 <- read.csv("bound_GSE22544.csv", header = T, sep = ",", stringsAsFactors = FALSE)
bound_GSE22544 <- bound_GSE22544[,-1] # removes 1st column of numbers
bound_GSE22544 <- bound_GSE22544[!(is.na(bound_GSE22544$Gene.Symbol) | bound_GSE22544$Gene.Symbol==""), ]
gene_symbol_GSE22544 <- read.csv("gene_symbol_GSE22544.csv", header = T, sep = ",", stringsAsFactors = FALSE)
gene_symbol_GSE22544 <- gene_symbol_GSE22544[,2] # chooses only the second column
gene_symbol_GSE22544 <- na.omit(gene_symbol_GSE22544) # removes rows that have NAs
# View(gene_symbol_GSE22544) # 16,072 entries
uniq_genesymbol <- unique(gene_symbol_GSE22544) #16,072 entries before unique function
# View(uniq_genesymbol)# 9,995 entries after unique function
mat_list <- list()
for (i in uniq_genesymbol){
df_subset <- subset(bound_GSE22544, Gene.Symbol == i, select = -c(1))
mat_subset <- as.matrix(df_subset)
mat_list[[i]] <- mat_subset
}
mean_fun <- function(x){
mean_value <- colMeans(x)
return(mean_value)
}
bound_GSE22544 <- read.csv("bound_GSE22544.csv", header = T, sep = ",", stringsAsFactors = FALSE)
bound_GSE22544 <- bound_GSE22544[,-1] # removes 1st column of numbers
bound_GSE22544 <- bound_GSE22544[!(is.na(bound_GSE22544$Gene.Symbol) | bound_GSE22544$Gene.Symbol==""), ]
gene_symbol_GSE22544 <- read.csv("gene_symbol_GSE22544.csv", header = T, sep = ",", stringsAsFactors = FALSE)
gene_symbol_GSE22544 <- gene_symbol_GSE22544[,2] # chooses only the second column
gene_symbol_GSE22544 <- na.omit(gene_symbol_GSE22544) # removes rows that have NAs
# View(gene_symbol_GSE22544) # 16,072 entries
uniq_genesymbol <- unique(gene_symbol_GSE22544) #16,072 entries before unique function
# View(uniq_genesymbol)# 9,995 entries after unique function
mat_list <- list()
for (i in uniq_genesymbol){
df_subset <- subset(bound_GSE22544, Gene.Symbol == i, select = -c(1))
mat_subset <- as.matrix(df_subset)
mat_list[[i]] <- mat_subset
}
mean_fun <- function(x){
mean_value <- colMeans(x)
return(mean_value)
}
bound_GSE22544 <- read.csv("bound_GSE22544.csv", header = T, sep = ",", stringsAsFactors = FALSE)
bound_GSE22544 <- bound_GSE22544[,-1] # removes 1st column of numbers
bound_GSE22544 <- bound_GSE22544[!(is.na(bound_GSE22544$Gene.Symbol) | bound_GSE22544$Gene.Symbol==""), ]
gene_symbol_GSE22544 <- read.csv("gene_symbol_GSE22544.csv", header = T, sep = ",", stringsAsFactors = FALSE)
gene_symbol_GSE22544 <- gene_symbol_GSE22544[,2] # chooses only the second column
gene_symbol_GSE22544 <- na.omit(gene_symbol_GSE22544) # removes rows that have NAs
# View(gene_symbol_GSE22544) # 16,072 entries
uniq_genesymbol <- unique(gene_symbol_GSE22544) #16,072 entries before unique function
# View(uniq_genesymbol)# 9,995 entries after unique function
mat_list <- list()
for (i in uniq_genesymbol){
df_subset <- subset(bound_GSE22544, Gene.Symbol == i, select = -c(1))
mat_subset <- as.matrix(df_subset)
mat_list[[i]] <- mat_subset
}
mean_fun <- function(x){
mean_value <- colMeans(x)
return(mean_value)
}
mean_list <- lapply(mat_list, mean_fun)
# View(mean_list)
new_df_GSE22544 <- read.csv("new_df_GSE22544.csv", header = T, sep = ",", stringsAsFactors = F, row.names = 1) # read exprs dataframe
new_df_GSE22544 <- cbind(new_df_GSE22544[, c(4,8,9,13)], new_df_GSE22544[,-c(4,8,9,13)]) # rearranges the normal classes to the first 4 columns
new_df_GSE22544 <- na.omit(new_df_GSE22544) # removes NAs which causes probs with for loop
# -------- Prep ----------------
#BiocManager::install("genefilter")
library(genefilter)
class_factor_2 <- as.factor(c(rep("normal", 4), rep("IDC", 4))) # creating a class factor (normal & IDC)
# ------ rowttests function to generate binary matrix -----------
significantgenes_2 <- c()
boot_list_2 <- list()
library(progress)
pb <- progress_bar$new(total = 1000)
for (i in 1:1000){
m_normal <- as.matrix(sample(new_df_GSE22544[,1:4], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_IDC <- as.matrix(sample(new_df_GSE22544[,5:20], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_bind <- cbind(m_normal, m_IDC) # has 8 columns, first 4 columns are sampled normal, last 4 columns are sample IDC
ttest_2 <- rowttests(m_bind, class_factor_2) # rowttests tests all 9994 rows(genes) w/o error
significantgenes_2 <- as.numeric(ttest_2$p.value < 0.05) # <0.05 forms a boolean output, and it is changed to numeric by as.numeric.
boot_list_2 <- append(boot_list_2, list(significantgenes_2)) # append each sampling as a list to a list
pb$tick() # for progress bar
Sys.sleep(1 / 1000) # for progress bar
}
# (3) Convert list into matrix
# ==================================================================================================
boot_mat_2 <- matrix(unlist(boot_list_2), ncol = 1000, byrow = FALSE) # converting list into matrix
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
hist(sum_vect, breaks = 20) # to visually inspect to determine point threshold of significance
hist(sum_vect, breaks = 50) # to visually inspect to determine point threshold of significance
hist(sum_vect, breaks = 1000) # to visually inspect to determine point threshold of significance
hist(sum_vect, breaks = 500) # to visually inspect to determine point threshold of significance
hist(sum_vect, breaks = 300) # to visually inspect to determine point threshold of significance
hist(sum_vect, breaks = 200) # to visually inspect to determine point threshold of significance
hist(sum_vect, breaks = 100) # to visually inspect to determine point threshold of significance
hist(sum_vect, breaks = 200) # to visually inspect to determine point threshold of significance
hist(sum_vect, breaks = 200, freq=FALSE, main=”Density plot”) # to visually inspect to determine point threshold of significance
hist(sum_vect, breaks = 200, freq=FALSE) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200, main = "Density Plot") # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "lightpink") # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "pink") # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "purple") # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "lightpurple") # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "green") # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "lightgreen") # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "lightgreen") # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "lightblue") # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange") # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 1)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.01)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.1)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.05)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.01)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.05)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.03)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.02)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.015)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.016)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.017)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.018)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.019)) # to visually inspect to determine point threshold of significance
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.020)) # to visually inspect to determine point threshold of significance
curve(dnorm(sum_vect, mean=mean(BMI), sd=sd(BMI)), add=TRUE, col= "darkblue", lwd=2)
curve(dnorm(sum_vect, mean=mean(sum_vect), sd=sd(sum_vect)), add=TRUE, col= "darkblue", lwd=2)
curve(sum_vect)
curve(dnorm(sum_vect))
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.020)) # to visually inspect to determine point threshold of significance
new_df_GSE22544 <- read.csv("new_df_GSE22544.csv", header = T, sep = ",", stringsAsFactors = F, row.names = 1) # read exprs dataframe
new_df_GSE22544 <- cbind(new_df_GSE22544[, c(4,8,9,13)], new_df_GSE22544[,-c(4,8,9,13)]) # rearranges the normal classes to the first 4 columns
new_df_GSE22544 <- na.omit(new_df_GSE22544) # removes NAs which causes probs with for loop
# BiocManager::install("genefilter")
library(genefilter)
class_factor_2 <- as.factor(c(rep("normal", 4), rep("IDC", 4))) # creating a class factor (normal & IDC)
significantgenes_2 <- c()
boot_list_2 <- list()
library(progress)
pb <- progress_bar$new(total = 1000)
for (i in 1:1000){
m_normal <- as.matrix(sample(new_df_GSE22544[,1:4], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_IDC <- as.matrix(sample(new_df_GSE22544[,5:20], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_bind <- cbind(m_normal, m_IDC) # has 8 columns, first 4 columns are sampled normal, last 4 columns are sample IDC
ttest_2 <- rowttests(m_bind, class_factor_2) # rowttests tests all 9994 rows(genes) w/o error
significantgenes_2 <- as.numeric(ttest_2$p.value < 0.05) # <0.05 forms a boolean output, and it is changed to numeric by as.numeric.
boot_list_2 <- append(boot_list_2, list(significantgenes_2)) # append each sampling as a list to a list
pb$tick() # for progress bar
Sys.sleep(1 / 1000) # for progress bar
}
boot_mat_2 <- matrix(unlist(boot_list_2), ncol = 1000, byrow = FALSE) # converting list into matrix
# dim(boot_mat_2)
sum_vect <- rowSums(boot_mat_2)
tail(sort(sum_vect), 5)
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.020)) # to visually inspect to determine point threshold of significance
new_df_GSE22544 <- read.csv("new_df_GSE22544.csv", header = T, sep = ",", stringsAsFactors = F, row.names = 1) # read exprs dataframe
new_df_GSE22544 <- cbind(new_df_GSE22544[, c(4,8,9,13)], new_df_GSE22544[,-c(4,8,9,13)]) # rearranges the normal classes to the first 4 columns
new_df_GSE22544 <- na.omit(new_df_GSE22544) # removes NAs which causes probs with for loop
# BiocManager::install("genefilter")
library(genefilter)
class_factor_2 <- as.factor(c(rep("normal", 4), rep("IDC", 4))) # creating a class factor (normal & IDC)
significantgenes_2 <- c()
boot_list_2 <- list()
library(progress)
pb <- progress_bar$new(total = 1000)
for (i in 1:1000){
m_normal <- as.matrix(sample(new_df_GSE22544[,1:4], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_IDC <- as.matrix(sample(new_df_GSE22544[,5:20], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_bind <- cbind(m_normal, m_IDC) # has 8 columns, first 4 columns are sampled normal, last 4 columns are sample IDC
ttest_2 <- rowttests(m_bind, class_factor_2) # rowttests tests all 9994 rows(genes) w/o error
significantgenes_2 <- as.numeric(ttest_2$p.value < 0.05) # <0.05 forms a boolean output, and it is changed to numeric by as.numeric.
boot_list_2 <- append(boot_list_2, list(significantgenes_2)) # append each sampling as a list to a list
pb$tick() # for progress bar
Sys.sleep(1 / 1000) # for progress bar
}
boot_mat_2 <- matrix(unlist(boot_list_2), ncol = 1000, byrow = FALSE) # converting list into matrix
# dim(boot_mat_2)
sum_vect <- rowSums(boot_mat_2)
tail(sort(sum_vect), 5)
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.020)) # to visually inspect to determine point threshold of significance
sum_sig <- as.numeric(sum_vect>180) # as.numeric function converts boolean output to 0s and 1s
first_sample <- as.factor(boot_mat_2[,1]) # actual factor
sum_sig <- as.factor(sum_sig) # observation factor
# install.packages("caret")
library(caret) # for confusion matrix function
confusionMatrix(sum_sig, first_sample)
conf_mat <- (confusionMatrix(sum_sig, first_sample))$table
# Precision: TP/(TP+FP):
precision <- conf_mat[1,1]/sum(conf_mat[1,1:2])
precision
# Recall: TP/(TP + FN):
recall <- conf_mat[1,1]/sum(conf_mat[1:2,1])
recall
# F-Score: 2 * precision * recall /(precision + recall):
f_score <- 2 * precision * recall / (precision + recall)
f_score
cm <-confusionMatrix(sum_sig, first_sample)
# ?confusionMatrix
draw_confusion_matrix <- function(cm) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2.5)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 438, 'Positive', cex=2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 438, 'Negative', cex=2)
text(125, 370, 'Predicted', cex=2, srt=90, font=2)
text(245, 450, 'Actual', cex=2, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(143, 400, 'Positive', cex=2, srt=90)
text(143, 335, 'Negative', cex=2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=4, font=2, col='black')
text(195, 335, res[2], cex=4, font=2, col='black')
text(295, 400, res[3], cex=4, font=2, col='black')
text(295, 335, res[4], cex=4, font=2, col='black')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
draw_confusion_matrix(cm)
new_df_GSE22544 <- read.csv("new_df_GSE22544.csv", header = T, sep = ",", stringsAsFactors = F, row.names = 1) # read exprs dataframe
new_df_GSE22544 <- cbind(new_df_GSE22544[, c(4,8,9,13)], new_df_GSE22544[,-c(4,8,9,13)]) # rearranges the normal classes to the first 4 columns
new_df_GSE22544 <- na.omit(new_df_GSE22544) # removes NAs which causes probs with for loop
# -------- Prep ----------------
#BiocManager::install("genefilter")
library(genefilter)
class_factor_2 <- as.factor(c(rep("normal", 4), rep("IDC", 4))) # creating a class factor (normal & IDC)
# ------ rowttests function to generate binary matrix -----------
significantgenes_2 <- c()
boot_list_2 <- list()
library(progress)
pb <- progress_bar$new(total = 1000)
for (i in 1:1000){
m_normal <- as.matrix(sample(new_df_GSE22544[,1:4], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_IDC <- as.matrix(sample(new_df_GSE22544[,5:20], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_bind <- cbind(m_normal, m_IDC) # has 8 columns, first 4 columns are sampled normal, last 4 columns are sample IDC
ttest_2 <- rowttests(m_bind, class_factor_2) # rowttests tests all 9994 rows(genes) w/o error
significantgenes_2 <- as.numeric(ttest_2$p.value < 0.05) # <0.05 forms a boolean output, and it is changed to numeric by as.numeric.
boot_list_2 <- append(boot_list_2, list(significantgenes_2)) # append each sampling as a list to a list
pb$tick() # for progress bar
Sys.sleep(1 / 1000) # for progress bar
}
# (3) Convert list into matrix
# ==================================================================================================
boot_mat_2 <- matrix(unlist(boot_list_2), ncol = 1000, byrow = FALSE) # converting list into matrix
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
hist(sum_vect, freq=FALSE, breaks = 200,
main = "Distribution of Significant Samplings in Breast Cancer Genes",
xlab = "Significant Samplings",
col = "orange",
xlim=c(0,1000),
ylim = c(0, 0.020)) # to visually inspect to determine point threshold of significance
# `sum_sig` is assigned the numeric output of the boolean of `i>180`
sum_sig <- as.numeric(sum_vect>180)
# (5) Creating confusion matrix
# =======================================================
first_sample <- as.factor(boot_mat_2[,1]) # actual
sum_sig <- as.factor(sum_sig) # observation
# install.packages("caret")
library(caret) # for confusion matrix function
confusionMatrix(sum_sig, first_sample)
conf_mat <- (confusionMatrix(sum_sig, first_sample))$table
# Visualising the Confusion Matrix
cm <-confusionMatrix(sum_sig, first_sample)
# ?confusionMatrix
draw_confusion_matrix <- function(cm) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2.5)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 438, 'Positive', cex=2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 438, 'Negative', cex=2)
text(125, 370, 'Predicted', cex=2, srt=90, font=2)
text(245, 450, 'Actual', cex=2, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(143, 400, 'Positive', cex=2, srt=90)
text(143, 335, 'Negative', cex=2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=4, font=2, col='black')
text(195, 335, res[2], cex=4, font=2, col='black')
text(295, 400, res[3], cex=4, font=2, col='black')
text(295, 335, res[4], cex=4, font=2, col='black')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
draw_confusion_matrix(cm)
new_df_GSE22544 <- read.csv("new_df_GSE22544.csv", header = T, sep = ",", stringsAsFactors = F, row.names = 1) # read exprs dataframe
new_df_GSE22544 <- cbind(new_df_GSE22544[, c(4,8,9,13)], new_df_GSE22544[,-c(4,8,9,13)]) # rearranges the normal classes to the first 4 columns
new_df_GSE22544 <- na.omit(new_df_GSE22544) # removes NAs which causes probs with for loop
# -------- Prep ----------------
#BiocManager::install("genefilter")
library(genefilter)
class_factor_2 <- as.factor(c(rep("normal", 4), rep("IDC", 4))) # creating a class factor (normal & IDC)
# ------ rowttests function to generate binary matrix -----------
significantgenes_2 <- c()
boot_list_2 <- list()
library(progress)
pb <- progress_bar$new(total = 1000)
for (i in 1:1000){
m_normal <- as.matrix(sample(new_df_GSE22544[,1:4], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_IDC <- as.matrix(sample(new_df_GSE22544[,5:20], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_bind <- cbind(m_normal, m_IDC) # has 8 columns, first 4 columns are sampled normal, last 4 columns are sample IDC
ttest_2 <- rowttests(m_bind, class_factor_2) # rowttests tests all 9994 rows(genes) w/o error
significantgenes_2 <- as.numeric(ttest_2$p.value < 0.05) # <0.05 forms a boolean output, and it is changed to numeric by as.numeric.
boot_list_2 <- append(boot_list_2, list(significantgenes_2)) # append each sampling as a list to a list
pb$tick() # for progress bar
Sys.sleep(1 / 1000) # for progress bar
}
# (3) Convert list into matrix
# ==================================================================================================
boot_mat_2 <- matrix(unlist(boot_list_2), ncol = 1000, byrow = FALSE) # converting list into matrix
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
# `sum_sig` is assigned the numeric output of the boolean of `i>180`
sum_sig <- as.numeric(sum_vect>180)
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
# (5) Creating confusion matrix
# =======================================================
first_sample <- as.factor(boot_mat_2[,1]) # actual
sum_sig <- as.factor(sum_sig) # observation
sum_sig
# (5) Creating confusion matrix
# =======================================================
first_sample <- as.factor(boot_mat_2[,1]) # actual
first_sample
boot_mat_2[,1]
significantgenes_2
boot_mat_2
sum_vect
