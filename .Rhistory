install.packages("prettydoc")
new_df_GSE22544 <- read.csv("new_df_GSE22544.csv", header = T, sep = ",", stringsAsFactors = F, row.names = 1) # read exprs dataframe
new_df_GSE22544 <- cbind(new_df_GSE22544[, c(4,8,9,13)], new_df_GSE22544[,-c(4,8,9,13)]) # rearranges the normal classes to the first 4 columns
new_df_GSE22544 <- na.omit(new_df_GSE22544) # removes NAs which causes probs with for loop
install.packages("genefilter")
#BiocManager::install("genefilter")
library(genefilter)
BiocManager::install("genefilter")
library(genefilter)
library(progress)
library(progress)
pb <- progress_bar$new(total = length(sum_vect)) # length of sum_vect is 9994
install.packages("caret")
new_df_GSE22544 <- read.csv("new_df_GSE22544.csv", header = T, sep = ",", stringsAsFactors = F, row.names = 1) # read exprs dataframe
new_df_GSE22544 <- read.csv("new_df_GSE22544.csv", header = T, sep = ",", stringsAsFactors = F, row.names = 1) # read exprs dataframe
new_df_GSE22544 <- cbind(new_df_GSE22544[, c(4,8,9,13)], new_df_GSE22544[,-c(4,8,9,13)]) # rearranges the normal classes to the first 4 columns
new_df_GSE22544 <- na.omit(new_df_GSE22544) # removes NAs which causes probs with for loop
# -------- Prep ----------------
#BiocManager::install("genefilter")
library(genefilter)
class_factor_2 <- as.factor(c(rep("normal", 4), rep("IDC", 4))) # creating a class factor (normal & IDC)
# ------ rowttests function to generate binary matrix -----------
significantgenes_2 <- c()
boot_list_2 <- list()
library(progress)
pb <- progress_bar$new(total = 1000)
for (i in 1:1000){
m_normal <- as.matrix(sample(new_df_GSE22544[,1:4], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_IDC <- as.matrix(sample(new_df_GSE22544[,5:20], size = 4, replace = T)) # samples 4 normal patients into a matrix
m_bind <- cbind(m_normal, m_IDC) # has 8 columns, first 4 columns are sampled normal, last 4 columns are sample IDC
ttest_2 <- rowttests(m_bind, class_factor_2) # rowttests tests all 9994 rows(genes) w/o error
significantgenes_2 <- as.numeric(ttest_2$p.value < 0.05) # <0.05 forms a boolean output, and it is changed to numeric by as.numeric.
boot_list_2 <- append(boot_list_2, list(significantgenes_2)) # append each sampling as a list to a list
pb$tick() # for progress bar
Sys.sleep(1 / 1000) # for progress bar
}
# (3) Convert list into matrix
# ==================================================================================================
boot_mat_2 <- matrix(unlist(boot_list_2), ncol = 1000, byrow = FALSE) # converting list into matrix
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
tail(sort(sum_vect), 5) # [1] 572 590 590 849 906
library(progress)
pb <- progress_bar$new(total = length(sum_vect))
# for loop that will generate binary vector to be used as observations for confusion matrix
for (i in sum_vect){
sum_sig <- as.numeric(x>180)
pb$tick() # for progress bar
Sys.sleep(1 / length(sum_vect)) # for progress bar
}
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
tail(sort(sum_vect), 5) # [1] 572 590 590 849 906
library(progress)
pb <- progress_bar$new(total = length(sum_vect))
# for loop that will generate binary vector to be used as observations for confusion matrix
for (i in sum_vect){
sum_sig <- as.numeric(i>180)
pb$tick() # for progress bar
Sys.sleep(1 / length(sum_vect)) # for progress bar
}
# (5) Creating confusion matrix
# =======================================================
first_sample <- as.factor(boot_mat_2[,1]) # actual
sum_sig <- as.factor(sum_sig) # observation
# install.packages("caret")
library(caret) # for confusion matrix function
confusionMatrix(sum_sig, first_sample)
length(sum_sig)
length(first_sample)
sum_sig
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
library(progress)
pb <- progress_bar$new(total = length(sum_vect))
# for loop that will generate binary vector to be used as observations for confusion matrix
for (i in sum_vect){
sum_sig <- as.numeric(i>180)
pb$tick() # for progress bar
Sys.sleep(1 / length(sum_vect)) # for progress bar
}
sum_sig
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
tail(sort(sum_vect), 5) # [1] 572 590 590 849 906
library(progress)
pb <- progress_bar$new(total = length(sum_vect))
# for loop that will generate binary vector to be used as observations for confusion matrix
for (i in sum_vect){
sum_sig <- as.numeric(sum_vect>180)
pb$tick() # for progress bar
Sys.sleep(1 / length(sum_vect)) # for progress bar
}
View(sum_sig)
sum_vect <- rowSums(boot_mat_2)
tail(sort(sum_vect), 5) # [1] 572 590 590 849 906
library(progress)
pb <- progress_bar$new(total = length(sum_vect))
# for loop that will generate binary vector to be used as observations for confusion matrix
for (i in sum_vect){
sum_sig <- as.numeric(i>180)
pb$tick() # for progress bar
Sys.sleep(1 / length(sum_vect)) # for progress bar
}
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
tail(sort(sum_vect), 5) # [1] 572 590 590 849 906
library(progress)
pb <- progress_bar$new(total = length(sum_vect))
# for loop that will generate binary vector to be used as observations for confusion matrix
for (i in sum_vect){
sum_sig <- as.numeric(sum_vec[i,]>180)
pb$tick() # for progress bar
Sys.sleep(1 / length(sum_vect)) # for progress bar
}
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
tail(sort(sum_vect), 5) # [1] 572 590 590 849 906
library(progress)
pb <- progress_bar$new(total = length(sum_vect))
# for loop that will generate binary vector to be used as observations for confusion matrix
for (i in sum_vect){
sum_sig <- as.numeric(sum_vect[i,]>180)
pb$tick() # for progress bar
Sys.sleep(1 / length(sum_vect)) # for progress bar
}
(sum_vect>180)
as.numeric(sum_vect>180)
sum_sig <- as.numeric(sum_vect>180)
sum_sig
View(sum_sig)
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
tail(sort(sum_vect), 5) # [1] 572 590 590 849 906
library(progress)
pb <- progress_bar$new(total = length(sum_vect))
# for loop that will generate binary vector to be used as observations for confusion matrix
for (i in length(sum_vect)){
sum_sig <- as.numeric(sum_vect>180)
pb$tick() # for progress bar
Sys.sleep(1 / length(sum_vect)) # for progress bar
}
length(sum_vect)
dim(sum_sig)
View(sum_sig)
# (4) Computing rowsums of each gene to see significance out of 1000
# ===========================================================================
sum_vect <- rowSums(boot_mat_2)
library(progress)
pb <- progress_bar$new(total = length(sum_vect))
sum_sig <- as.numeric(sum_vect>180)
# (5) Creating confusion matrix
# =======================================================
first_sample <- as.factor(boot_mat_2[,1]) # actual
sum_sig <- as.factor(sum_sig) # observation
# install.packages("caret")
library(caret) # for confusion matrix function
confusionMatrix(sum_sig, first_sample)
# install.packages("caret")
library(caret) # for confusion matrix function
confusionMatrix(sum_sig, first_sample)
install.packages("caret")
install.packages("caret")
